import React, { useState } from "react";
import { TextField, Button, Box, Typography, Card, CardContent, CardMedia } from "@mui/material";
import axios from "axios";
import styles from "./AddBook.module.scss";

interface BookData {
  title: string;
  authors: { name: string }[];
  cover?: { large: string };
  publish_date?: string;
  number_of_pages?: number;
}

const AddBook: React.FC = () => {
  const [isbn, setIsbn] = useState<string>("");
  const [bookData, setBookData] = useState<BookData | null>(null);
  const [error, setError] = useState<string>("");

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setIsbn(e.target.value);
  };

  const fetchBookData = async () => {
    setError("");
    try {
      const response = await axios.get(
        `https://openlibrary.org/api/books?bibkeys=ISBN:${isbn}&format=json&jscmd=data`
      );
      const data = response.data[`ISBN:${isbn}`];
      if (data) {
        const fetchedBook: BookData = {
          title: data.title,
          authors: data.authors || [],
          cover: data.cover,
          publish_date: data.publish_date,
          number_of_pages: data.number_of_pages,
        };
        setBookData(fetchedBook);
      } else {
        setError("Book not found. Please check the ISBN.");
      }
    } catch (err) {
      setError("An error occurred while fetching book data.");
    }
  };

  const handleSubmit = () => {
    // Submit logic: Save bookData to the app
    console.log("Book data to be added:", bookData);
    // You can make an API call to save the book data in your database here.
  };

  return (
    <Box className={styles.addBookContainer}>
      <Typography variant="h4">Add Book by ISBN</Typography>
      <TextField
        label="ISBN"
        value={isbn}
        onChange={handleChange}
        fullWidth
        margin="normal"
        required
      />
      <Button variant="contained" color="primary" onClick={fetchBookData}>
        Fetch Book Details
      </Button>

      {error && <Typography color="error">{error}</Typography>}

      {bookData && (
        <Box className={styles.bookPreview}>
          <Card className={styles.bookCard}>
            {bookData.cover?.large && (
              <CardMedia
                component="img"
                height="200"
                image={bookData.cover.large}
                alt={bookData.title}
              />
            )}
            <CardContent>
              <Typography variant="h5">{bookData.title}</Typography>
              <Typography variant="body2" color="textSecondary">
                {bookData.authors.map((author) => author.name).join(", ")}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                Published: {bookData.publish_date}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                Pages: {bookData.number_of_pages}
              </Typography>
              <Button variant="contained" color="primary" onClick={handleSubmit}>
                Add Book
              </Button>
            </CardContent>
          </Card>
        </Box>
      )}
    </Box>
  );
};

export default AddBook;
